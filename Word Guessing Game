#include <SDL.h>
#include <SDL_ttf.h>
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <map>
#include <ctime>

using namespace std;

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;
const int MAX_LIVES = 6;

void renderText(SDL_Renderer* renderer, TTF_Font* font, const string& text, int x, int y, SDL_Color color) {
    SDL_Surface* surface = TTF_RenderText_Solid(font, text.c_str(), color);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_Rect dstRect = { x, y, surface->w, surface->h };
    SDL_RenderCopy(renderer, texture, NULL, &dstRect);
    SDL_FreeSurface(surface);
    SDL_DestroyTexture(texture);
}

void SDL_RenderDrawCircle(SDL_Renderer* renderer, int cx, int cy, int radius) {
    for (int w = -radius; w <= radius; ++w)
        for (int h = -radius; h <= radius; ++h)
            if (w * w + h * h <= radius * radius)
                SDL_RenderDrawPoint(renderer, cx + w, cy + h);
}

void drawHangman(SDL_Renderer* renderer, int lives) {
    SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
    SDL_RenderDrawLine(renderer, 600, 100, 600, 400);
    SDL_RenderDrawLine(renderer, 600, 100, 680, 100);
    SDL_RenderDrawLine(renderer, 680, 100, 680, 150);

    int parts = MAX_LIVES - lives;
    if (parts >= 1) SDL_RenderDrawCircle(renderer, 680, 180, 30);
    if (parts >= 2) SDL_RenderDrawLine(renderer, 680, 210, 680, 290);
    if (parts >= 3) SDL_RenderDrawLine(renderer, 680, 230, 650, 260);
    if (parts >= 4) SDL_RenderDrawLine(renderer, 680, 230, 710, 260);
    if (parts >= 5) SDL_RenderDrawLine(renderer, 680, 290, 650, 330);
    if (parts >= 6) SDL_RenderDrawLine(renderer, 680, 290, 710, 330);
}

void waitForKey(SDL_Renderer* renderer) {
    SDL_Event e;
    while (true) {
        while (SDL_PollEvent(&e)) {
            if (e.type == SDL_QUIT) exit(0);
            if (e.type == SDL_KEYDOWN) return;
        }
        SDL_Delay(100);
    }
}

int main(int argc, char* argv[]) {
    SDL_Init(SDL_INIT_VIDEO);
    TTF_Init();

    SDL_Window* window = SDL_CreateWindow("Hangman - AI Guess", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, 0);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    TTF_Font* font = TTF_OpenFont("arial.ttf", 28);

    if (!font) {
        cerr << "Khong mo duoc font arial.ttf\n";
        return 1;
    }

    SDL_Color white = { 255, 255, 255 };
    SDL_Color green = { 0, 255, 0 };
    SDL_Color red = { 255, 0, 0 };

    SDL_SetRenderDrawColor(renderer, 10, 10, 50, 255);
    SDL_RenderClear(renderer);
    renderText(renderer, font, "AI Hangman - Nhan phim de bat dau", 180, 180, white);
    SDL_RenderPresent(renderer);
    waitForKey(renderer);

    vector<string> wordList = {
        "apple", "brave", "chair", "dance", "eagle", "flame", "ghost", "horse", "ideal", "joker",
        "knife", "laugh", "magic", "night", "ocean", "piano", "queen", "river", "smile", "table",
        "under", "voice", "watch", "xylol", "youth", "zebra", "angel", "beach", "cloud", "dream",
        "earth", "fairy", "giant", "heart", "index", "jewel", "koala", "lemon", "mango", "nurse",
        "orbit", "peace", "quiet", "robot", "shark", "trust", "union", "vivid", "world", "yeast",
        "zesty", "aroma", "blend", "crush", "drill", "enjoy", "frost", "glide", "haste", "input",
        "jolly", "kneel", "lobby", "minor", "noble", "plant", "quest", "relay", "stone", "trick",
        "unity", "visit", "widen", "xenon", "yield", "zoney", "adapt", "blink", "chant", "daisy",
        "elite", "flush", "grime", "haunt", "icyed", "joint", "knead", "layer", "motto", "nifty",
        "opine", "plank", "query", "rouge", "swell", "tonic", "unzip", "value", "wrack"
    };

    srand(time(0));
    string word = wordList[rand() % wordList.size()];
    vector<bool> guessed(word.size(), false);
    vector<char> tried;
    int lives = MAX_LIVES;
    bool won = false;

    while (lives > 0 && !won) {
        map<char, int> freq;
        for (const string& w : wordList) {
            if (w.size() != word.size()) continue;
            bool match = true;
            for (size_t i = 0; i < word.size(); ++i) {
                if (guessed[i] && w[i] != word[i]) {
                    match = false;
                    break;
                }
                if (!guessed[i] && find(tried.begin(), tried.end(), w[i]) != tried.end()) {
                    match = false;
                    break;
                }
            }
            if (match) {
                for (char c : w)
                    if (find(tried.begin(), tried.end(), c) == tried.end())
                        freq[c]++;
            }
        }

        if (freq.empty()) break;
        char guess = max_element(freq.begin(), freq.end(), [](auto& a, auto& b) {
            return a.second < b.second;
            })->first;

        bool correct = false;
        for (size_t i = 0; i < word.size(); ++i) {
            if (word[i] == guess) {
                guessed[i] = true;
                correct = true;
            }
        }

        if (!correct) lives--;
        tried.push_back(guess);

        SDL_SetRenderDrawColor(renderer, 30, 30, 30, 255);
        SDL_RenderClear(renderer);

        int xStart = 50;
        for (size_t i = 0; i < word.size(); ++i) {
            string s = guessed[i] ? string(1, word[i]) : "_";
            SDL_Color c = guessed[i] ? green : white;
            renderText(renderer, font, s, xStart + i * 40, 100, c);
        }

        renderText(renderer, font, "Mang con lai: " + to_string(lives), 50, 180, white);
        renderText(renderer, font, "May vua doan: " + string(1, guess), 50, 240, correct ? green : red);

        string triedStr = "Da doan: ";
        for (char c : tried) triedStr += c;
        renderText(renderer, font, triedStr, 50, 300, white);

        drawHangman(renderer, lives);
        SDL_RenderPresent(renderer);
        SDL_Delay(1000);

        won = all_of(guessed.begin(), guessed.end(), [](bool b) { return b; });
    }

    SDL_SetRenderDrawColor(renderer, 0, 0, 30, 255);
    SDL_RenderClear(renderer);
    string result = won ? "May da doan dung tu: " + word : "May that bai! Tu la: " + word;
    renderText(renderer, font, result, 100, 250, won ? green : red);
    renderText(renderer, font, "Nhan phim bat ky de thoat...", 200, 320, white);
    SDL_RenderPresent(renderer);
    waitForKey(renderer);

    TTF_CloseFont(font);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    TTF_Quit();
    SDL_Quit();
    return 0;
}

